<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/blog-myc/2024/08/25/hello-world/"/>
      <url>/blog-myc/2024/08/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈 Java9+ 的模块化</title>
      <link href="/blog-myc/2024/01/11/%E8%B0%88%E8%B0%88-Java9-%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/blog-myc/2024/01/11/%E8%B0%88%E8%B0%88-Java9-%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>这几天，因为打包方面的一点问题，在查资料的过程中，接触到了模块化，顺便也实践了一下，我觉得这是一个挺有用的东西，因此在这里分享一下。</p><h2 id="什么是模块？"><a href="#什么是模块？" class="headerlink" title="什么是模块？"></a>什么是模块？</h2><p>模块是 Java9 中提出的一个新概念，本质上是一个 jar 包，但是它比普通的 jar 包多了一个文件 <code>module-info.class</code> 文件，这是模块的核心，也称之为模块描述符——<code>module descriptor</code> 。   </p><p>在 <code>module descriptor</code> 中，定义了以下的信息：</p><ul><li>模块名称</li><li>依赖哪些模块</li><li>导出模块内的哪些包（允许直接 <code>import</code> 使用）</li><li>开放模块内的哪些包（允许通过 Java 反射访问）</li><li>提供哪些服务</li><li>依赖哪些服务</li></ul><p>理论上，任意一个 jar 文件，只要加上了一个合法的 <code>module descriptor</code>，就可以升级为一个模块。而一个项目的多个模块就可以构成了模块系统。   </p><p>那么，模块系统到底带来了什么好处？主要有以下三点:</p><ol><li>精简了 JRE。这是我认为最大的好处。引入了模块系统后，JDK 自身被划分为很多模块（以 JDK17 为例，划分为了 71 个模块）。通过新增的 <code>jlink</code> 工具，开发者可以根据实际应用场景随意组合模块，生成自定义的 JRE。相比于 JDK8 及之前，大大缩小了 JRE 的大小，这也让 Java 对嵌入式应用开发变得更友好。</li><li>更好的依赖管理。有了模块系统，Java 可以根据 <code>module descriptor</code> 计算出各个模块间的依赖关系，一旦发现循环依赖，启动就会终止。同时，由于模块系统不允许不同模块导出相同的包，所以在查找包时，Java 能够精准的定位到一个模块，从而获得更好的性能。  </li><li>更好的安全性。在模块系统引入之前，Java 就只有 4 种包可见性，这也让 Java 的封装性大打折扣。而引入了模块系统之后，利用 <code>module descriptor</code> 中的 <code>export</code> 关键词，可以精准地控制哪些类可以对外开放使用，哪些类只能内部使用，细化了类的可见性，带来了更好的安全性。</li></ol><h2 id="怎么定义模块？"><a href="#怎么定义模块？" class="headerlink" title="怎么定义模块？"></a>怎么定义模块？</h2><p>上面提到，模块有一个模块描述符 <code>module descriptor</code>，对应于根目录下的 <code>module-info.class</code> 文件。它是由 <code>module-info.java</code> 文件编译而成的，<code>module-info.java</code> 在每个模块项目源码的根目录下，也就是在 <code>java</code> 文件夹下。   </p><p><code>module-info.java</code> 文件中的语法是这样子的：  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">open</span><span class="token punctuation">]</span> <span class="token keyword">module</span> <span class="token generics"><span class="token punctuation">&lt;</span>moduleName<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">requires</span> <span class="token punctuation">[</span><span class="token keyword">transitive</span><span class="token punctuation">]</span> <span class="token generics"><span class="token punctuation">&lt;</span>module1<span class="token punctuation">></span></span><span class="token punctuation">;</span>    <span class="token keyword">exports</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">package</span><span class="token punctuation">></span></span> <span class="token punctuation">[</span><span class="token keyword">to</span> <span class="token generics"><span class="token punctuation">&lt;</span>module1<span class="token punctuation">></span></span><span class="token punctuation">,</span><span class="token generics"><span class="token punctuation">&lt;</span>module2<span class="token punctuation">></span></span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">opens</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">package</span><span class="token punctuation">></span></span> <span class="token punctuation">[</span><span class="token keyword">to</span> <span class="token generics"><span class="token punctuation">&lt;</span>module1<span class="token punctuation">></span></span><span class="token punctuation">,</span><span class="token generics"><span class="token punctuation">&lt;</span>module2<span class="token punctuation">></span></span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">provides</span> <span class="token operator">&lt;</span><span class="token keyword">interface</span> <span class="token operator">|</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span><span class="token operator">></span> <span class="token keyword">with</span> <span class="token generics"><span class="token punctuation">&lt;</span>implClass1<span class="token punctuation">></span></span><span class="token punctuation">,</span><span class="token generics"><span class="token punctuation">&lt;</span>implClass2<span class="token punctuation">></span></span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token keyword">uses</span> <span class="token operator">&lt;</span><span class="token keyword">interface</span> <span class="token operator">|</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>语法解读：  </p><ul><li><code>[open] module &lt;moduleName&gt;</code>：声明一个模块，模块名应全局唯一，不可重复。加上 <code>open</code> 关键词表示模块内的所有包都允许通过 Java 反射访问，模块声明体内不再允许使用 <code>opens</code> 语句。</li><li><code>requires [transitive] &lt;module1&gt;</code>：声明模块依赖，一次只能声明一个依赖，如果依赖多个模块，需要多次声明。加上 <code>transitive</code> 关键词表示传递依赖，比如模块 A 依赖模块 B，模块 B 依赖模块 C，那么模块 A 就会自动依赖模块 C，类似于 Maven。</li><li><code>exports &lt;package&gt; [to &lt;module1&gt;,&lt;module2&gt;,...]</code>：导出模块内的包（允许直接 <code>import</code> 使用），一次也是只能导出一个包，如果需要导出多个包，需要多次声明。如果需要定向导出到某个或某些模块，可以使用 <code>to</code> 关键词，后面跟上导出的目标模块或模块列表。不在导出包中的类，即使是 <code>public</code> 修饰的，其他模块也无法使用它。</li><li><code>opens &lt;package&gt; [to &lt;module1&gt;,&lt;module2&gt;,...]</code>：开放模块内的包（允许通过 Java 反射访问），一次开放一个包，如果需要开放多个包，需要多次声明。如果需要定向开放，同样可以使用 <code>to</code> 关键词。</li><li><code>provides &lt;interface | abstract class&gt; with &lt;implClass1&gt;,&lt;implClass2&gt;,...</code>：声明模块提供的 Java SPI 服务，一次可以声明多个服务实现类。</li><li><code>uses &lt;interface | abstract class&gt;</code>：声明模块依赖的 Java SPI 服务，加上之后模块内的代码就可以通过 <code>ServiceLoader.load(Class)</code> 一次性加载所声明的 SPI 服务的所有实现类。</li></ul><h2 id="模块怎么使用？"><a href="#模块怎么使用？" class="headerlink" title="模块怎么使用？"></a>模块怎么使用？</h2><p>Java9 引入一系列新的命令和参数用于编译、运行和封装模块，其中最重要的就是两个参数 <code>--module-path</code> 和 <code>--module</code>。  </p><ul><li><code>--module-path</code>：简写为 <code>-p</code>，用来指定模块路径，多个模块之间用 “:”（ Mac 和 Linux 环境下）或者 “;”（ Windows 环境下）分隔。</li><li><code>--module</code>：简写为 <code>-m</code>，用来指定待运行模块的主类，输入格式为 <code>&lt;module&gt;/&lt;main_class&gt;</code>。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编译模块</span>javac --module-path <span class="token operator">&lt;</span>module_path<span class="token operator">></span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token comment"># 将 jar 包转换为模块，模块名称 &lt;output_jmod_name> 要与 module-info.java 中定义的模块名称一致</span>jmod create --class-path <span class="token operator">&lt;</span>jar_file<span class="token operator">></span> <span class="token operator">&lt;</span>output_jmod_name<span class="token operator">></span><span class="token comment"># 运行模块</span><span class="token function">java</span> --module-path <span class="token operator">&lt;</span>module_path<span class="token operator">></span> <span class="token parameter variable">--module</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>/<span class="token operator">&lt;</span>main_class<span class="token operator">></span><span class="token comment"># 封装模块进 JRE </span>jlink --module-path <span class="token operator">&lt;</span>moudle_path<span class="token operator">></span> --add-modules <span class="token operator">&lt;</span>module<span class="token operator"><span class="token file-descriptor important">1</span>></span>,<span class="token operator">&lt;</span>module<span class="token operator"><span class="token file-descriptor important">2</span>></span>,<span class="token punctuation">..</span>. <span class="token parameter variable">--output</span> custom-jre<span class="token comment">## 分析模块依赖的其他模块</span>jdeps <span class="token parameter variable">-s</span> --module-path <span class="token operator">&lt;</span>module_path<span class="token operator">></span>  <span class="token operator">&lt;</span>module<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动模块和未命名模块"><a href="#自动模块和未命名模块" class="headerlink" title="自动模块和未命名模块"></a>自动模块和未命名模块</h2><p>上面已经提到，我们通过定义 <code>module-info.java</code> 文件可以声明一个模块，这种模块也叫做<strong>命名模块</strong>。但是对于 Java8 及之前的老应用，并没有模块信息，这种应该怎么办？答案就是通过 <strong>未命名模块</strong> 和 <strong>自动模块</strong>。  </p><ul><li><p><strong>未命名模块</strong>：所有 <code>--class-path</code> 下的 jar 文件自动转为未命名模块。未命名模块可以读取到其他所有的模块，并且会将自己包下的所有类都暴露给外界。需要注意的是未命名模块虽然导出了所有的包，但是由于命名模块无法在 <code>module-info.java</code> 文件中声明对未命名模块的依赖，因此命名模块无法读取未命名模块。未命名模块导出所有包是为了让其他的未命名模块能够加载这些类。</p></li><li><p><strong>自动模块</strong>：所有 <code>--module-path</code> 下的 jar 文件会自动转为自动模块。自动模块可以引用其他所有命名模块的类，并且也会将自己包下的所有类暴露给外界。它跟未命名模块不同的是，虽然都没有 <code>module-info.java</code> 文件，但是自动模块会由 JDK 根据 jar 包名自动生成模块名，以允许其他模块使用。生成模块名的规则是：首先会移除文件扩展名和版本号，然后用 “.” 替换所有非字母字符。换句话说，自动模块是一种特殊的命名模块，也遵循模块规则，只是模块名是由 JDK 自动生成的。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是对 Java9 开始有的模块化的介绍。虽然从引入之后到现在，模块化的使用还不够广泛，但是这并不影响它还是一个好特性，如果能够妥善运用，对开发工作还是大有益处的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://emacoo.cn/coding/java-module-system/">【JDK 11】关于 Java 模块系统，看这一篇就够了</a></li><li><a href="https://juejin.cn/post/6844903646971297806#heading-3">Java9模块化遇坑</a></li><li><a href="http://luomuren.top/articles/2023/07/17/1689574984946.html#toc_h2_2">Java 9模块化系统：构建可扩展的应用程序</a></li><li><a href="https://blog.51cto.com/u_16213721/7202551">Java 多个模块 获取当前模块路径 java多模块开发的好处</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>踩坑指南之 JavaFX 运行和打包</title>
      <link href="/blog-myc/2024/01/10/%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97%E4%B9%8B-JavaFX-%E8%BF%90%E8%A1%8C%E5%92%8C%E6%89%93%E5%8C%85/"/>
      <url>/blog-myc/2024/01/10/%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97%E4%B9%8B-JavaFX-%E8%BF%90%E8%A1%8C%E5%92%8C%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>上一篇已经说了，我有个小工具用到了 JavaFX，在这过程中运行和打包时遇到了一些坑，在此记录。   </p><h2 id="运行时遇到的坑"><a href="#运行时遇到的坑" class="headerlink" title="运行时遇到的坑"></a>运行时遇到的坑</h2><p>在运行 JavaFX 程序时，出现错误：缺少 JavaFX 运行时组件, 需要使用该组件来运行此应用程序，如下图：   </p><div align="center"><img src="运行错误-缺少JavaFX运行时组件.png" width="100%"></div><p>出现这个问题的原因是 JDK11 后，JavaFX 就从 JDK 剥离出来了，以独立的模块的形式提供，所以 JDK 中不包括 JavaFX 的运行时组件。   </p><p>知道了原因，解决起来就好办多了。既然 JDK 没有，那就提供呗，具体的解决方法如下：  </p><ol><li>下载 <a href="https://gluonhq.com/products/javafx/">JavaFX</a> jar 包。里面有 jmod 和 SDK 两种下载，选择 SDK 方式。  </li><li>在程序启动配置中添加 <code>VM options</code> 参数，将 JavaFX SDK 添加进去：<code>--module-path &quot;E:\develop\javafx\javafx-sdk-21.0.1\lib&quot; --add-modules javafx.controls,javafx.fxml</code>。</li></ol><div align="center"><img src="添加虚拟机启动参数.png" width="100%"></div><p>这样，就可以顺利启动 JavaFX 程序了。</p><h2 id="打包时遇到的坑"><a href="#打包时遇到的坑" class="headerlink" title="打包时遇到的坑"></a>打包时遇到的坑</h2><p>这里说的打包是指将 JavaFX 程序打成 jar 包并通过 JRE 成功运行，不是打成 exe 应用程序。关于打包成 exe 应用程序，可以看我 <a href="https://helloworldyc.github.io/blog-myc/2024/01/08/Java-jar-%E5%8C%85%E6%89%93%E5%8C%85%E6%88%90-exe-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/">Java jar 包打包成 exe 应用程序</a> 这篇文章。   </p><p>打成 jar 包大家应该都很熟悉，直接用 Maven Package 不就行了吗，这有什么坑？<br>其实仔细想想，可以发现这里有两个问题，一是依赖，二是 JavaFX 运行时组件。为什么说这两个有坑，接下来详细说一下。  </p><h3 id="问题一：依赖"><a href="#问题一：依赖" class="headerlink" title="问题一：依赖"></a>问题一：依赖</h3><p>我们知道，对于一个普通的 jar 包，我们要给别人使用，直接使用 Maven Package 打包后发给别人即可。但是，这是建立在对方有开发环境的前提下，对方可以直接导入我们所需的依赖。然而，JavaFX 程序并不是普通的 Java 程序，它很可能是给普通人使用的，也就是说对方没法导入我们所需的依赖。因此，我们需要将程序的依赖也打包进 jar 包中，否则最终用 JRE 运行 jar 包时很可能报 <code>ClassNotFoundException</code>，如下图所示。  </p><div align="center"><img src="找不到类错误.png" width="100%"></div><p>想将程序的依赖一起打包进 jar 包中，可以利用 <code>maven-assembly-plugin</code> 或者 <code>maven-shade-plugin</code> 插件，这里以程序中所用的 <code>maven-assembly-plugin</code> 来示例。  </p><p>在 pom 文件中，添加插件，如下：  </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>homework-analysis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-assembly-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>single<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>myc.HomeworkAnalysis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRefs</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRef</span><span class="token punctuation">></span></span>jar-with-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRef</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRefs</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后，再利用 maven package 打包，就可以得到一个包含了程序和依赖的 jar 包。  </p><h3 id="问题二：JavaFX-运行时组件"><a href="#问题二：JavaFX-运行时组件" class="headerlink" title="问题二：JavaFX 运行时组件"></a>问题二：JavaFX 运行时组件</h3><p>大家应该还记得上面说的，JavaFX 程序运行前要添加 <code>VM options</code>，目的就是让程序运行时能找到 JavaFX 运行时组件。那我们打包后的 jar 包怎么能找到 JavaFX 运行时组件呢？从理论上来说，我们添加 <code>VM options</code> 实际上就是添加 jar 包或者说 jmod，那么我们是否能够直接将 JavaFX SDK 的 jar 包也一起打包到我们的 jar 包中呢？这个我还没有尝试过，还有待证明。我采用的是另一种方法——在 JRE 中添加。   </p><p>众所周知，要想运行一个 Java 程序，除了程序本身，还要有运行环境，也就是 JRE。既然没有将 JavaFX 运行时组件打包进我们的 jar 包中，那必然是要封装进 JRE。所幸，在 Java9 之后，有了模块化的概念，我们可以自定义所需的 JRE。关于模块化，可以看我另外一篇文章，这个不是本文的重点。这里主要说一下怎么将 JavaFX 运行时组件封装进 JRE，以及还有什么注意点。   </p><p>这个其实也不复杂，在自定义 JRE 时，将 JavaFX 的模块也封装进去就好了：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jlink --module-path <span class="token string">"E:\develop\javafx\javafx-sdk-21.0.1\lib"</span> --add-modules <span class="token punctuation">[</span>yourOtherDeps<span class="token punctuation">]</span>,javafx.base,javafx.graphics,javafx.controls <span class="token parameter variable">--output</span> custom-runtime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：<code>[yourOtherDeps]</code> 是程序所需的其他依赖，可通过 <code>jdeps</code> 命令确定。</p></blockquote><p>这样，就得到了有 JavaFX 运行组件的 JRE。本来以为到这里就可以结束，但事实上这样子得到的 JRE 在运行 JavaFX jar 包的时候是会出现下图所示的错误的。  </p><div align="center"><img src="通过SDK定义JRE会出现的错误.png" width="100%"></div><p>这个错误直译就是由于找不到合适的管道导致图形化设备初始化失败，实际上就是由于封装的 JavaFX 运行时组件有问题导致的。这个错误困扰了我相当长一段时间，也尝试了网上所说的诸多解决方案，最终终于发现了问题所在。原来，我们在自定义 JRE 时导入的 JavaFX 模块是由 SDK 的 jar 包转换而来的，而 <strong>JavaFX 运行时组件要想正确的封装进 JRE 中应该要导入官网提供的 jmod</strong>。事实上，官网提供了 JavaFX 的 jmod 也正是为了让人能添加到自定义的 JRE 中。至于为什么通过 JavaFX SDK 封装的 JRE 有问题，我猜测可能是缺失了 module-info.java 文件或者是 module-info.java 文件中定义不全的缘故。   </p><p>既然知道了问题出现在哪里，当然就好解决了。从<a href="https://gluonhq.com/products/javafx/">官网</a>下载 JavaFX jmod，将 <code>module-path</code> 换为 jmod 的路径即可，如下。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jlink --module-path <span class="token string">"E:\develop\javafx\javafx-jmods-21.0.1"</span> --add-modules <span class="token punctuation">[</span>yourOtherDeps<span class="token punctuation">]</span>,javafx.base,javafx.graphics,javafx.controls <span class="token parameter variable">--output</span> custom-runtime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后，这样子得到的 JRE 用来运行我们打包的 JavaFX jar 包就没有问题了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaFX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaFX 入门</title>
      <link href="/blog-myc/2024/01/10/JavaFX-%E5%85%A5%E9%97%A8/"/>
      <url>/blog-myc/2024/01/10/JavaFX-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>最近，因为有一个小工具需要用到 UI 界面，稍微查了一下，发现 JavaFX 是目前比较流行的 UI 框架，就选择了它来做。由于此前没有接触过，加上 JavaFX 的相关资料也比较少，因此在这里总结分享一下。</p><h2 id="JavaFX-简介"><a href="#JavaFX-简介" class="headerlink" title="JavaFX 简介"></a>JavaFX 简介</h2><p>JavaFX 是一个用于创建富客户端应用程序的 UI 框架，它提供了丰富的图形和多媒体功能，以及现代的用户界面设计元素。JavaFX 最初由 Sun Microsystems 开发，后来由 Oracle 继续推进。  </p><p>JavaFX 具有以下的特点和功能：  </p><ol><li>现代化的图形库： JavaFX 提供了现代化的图形库，支持丰富的图形渲染、动画效果和多媒体处理。它使用了硬件加速技术，提供更流畅的用户界面体验。</li><li>FXML 和 Scene Builder： FXML 是一种用于定义用户界面的声明性 XML 语言。Scene Builder 是一个可视化工具，允许开发者以拖放方式设计用户界面，然后使用 FXML 进行布局。</li><li>丰富的 UI 控件： JavaFX 提供了丰富的预建 UI 控件，包括按钮、标签、文本框、表格视图等。这些控件可以方便地用于构建各种类型的应用程序。</li><li>CSS 样式化： JavaFX 允许使用 CSS 样式表对用户界面进行样式化，使得界面设计更加灵活和易于维护。</li><li>事件处理： JavaFX 支持事件驱动编程，开发者可以通过注册事件处理器来响应用户的交互，例如点击、键盘输入等。</li><li>并发和多线程： JavaFX 提供了方便的 API，支持并发编程和多线程操作，使得开发者可以在应用程序中实现并行和异步操作。</li><li>跨平台支持： JavaFX 应用程序可以轻松地在不同平台上运行，包括 Windows、macOS 和 Linux。这得益于 Java 虚拟机（JVM）的跨平台性。</li><li>集成性： JavaFX 可以与其他 Java 技术和库无缝集成，如 JDBC（Java 数据库连接）、Web Services 等。</li></ol><p>JavaFX 在 JDK11 之前是 JavaSE 的一部分，但从 JDK11 开始，它被移出了 JDK，作为一个独立的模块。因此，JDK11 之后的版本，要使用 JavaFX，需要自行导入。</p><h2 id="启动-JavaFX-程序"><a href="#启动-JavaFX-程序" class="headerlink" title="启动 JavaFX 程序"></a>启动 JavaFX 程序</h2><p>我们先来看一下一个 JavaFX 程序的主类是怎么样的，它跟传统的 Java 程序有一点区别。     </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> stage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StackPane</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"Hello JavaFX!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置界面的场景</span>        stage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// show() 方法显示主界面</span>        stage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的程序中可以看到，使用 Java FX 的时候，要让主类继承 <code>Application</code>。<code>Application</code> 是一个抽象类，需要实现 <code>start()</code> 方法，此外还需要在 <code>main</code> 方法中调用 <code>launch()</code> 方法。这里解释一下这两个方法：      </p><ul><li>首先，<code>launch()</code> 方法是 <code>Application</code> 类中的静态方法，它是 JavaFX 应用程序的入口点，负责启动 JavaFX 运行时系统。   </li><li><code>start()</code> 方法实际上是我们真正写应用程序代码的地方，可以让我们自行发挥设计界面，其中方法参数 <code>Stage stage</code> 直译的话是舞台，实际上就是 UI 界面的主界面。一般来说，我们通过设置场景 <code>Scene</code> 来修饰界面，可以简单地类比为界面就是地板，场景就是毯子，那么后续要添加的组件就是道具，可以任意摆放在毯子上面。当我们想要切换界面的场景时，只需要调用界面的 <code>setScene()</code> 方法切换即可。而想要另开一个界面的时候，则需要新建一个 <code>Stage</code>。</li></ul><p>上面这段程序运行的结果如下图所示。后续我们就可以在此基础上添加组件完成我们想要的 UI 界面。</p><div align="center"><img src="JavaFX程序主界面.png" width="50%"></div><h2 id="JavaFX-中组件的继承结构"><a href="#JavaFX-中组件的继承结构" class="headerlink" title="JavaFX 中组件的继承结构"></a>JavaFX 中组件的继承结构</h2><p>接下来，我们来看一下 JavaFX 中组件的继承结构，对组件有一个总体的把握。当然，这只是其中一部分，更细的继承结构若有兴趣可以深入去研究。</p><div align="center"><img src="JavaFX继承结构.png" width="60%"></div>   <p><code>Node</code> 类是所有组件的顶层抽象类，它实现了 <code>Styleable</code>、<code>EventTarget</code> 两个接口，以及有 <code>IDProperty</code> 注解注释。根据源文件所说，它是场景图节点的基类：Base class for scene graph nodes.    </p><p>在 <code>Node</code> 类下有多个子类（不止图中的三个），它们表示不同类型的节点。例如图中的 <code>Parent</code> 抽象类表示 JavaFX 中的有子节点类型，它可以包含其他节点，如 <code>ImageView</code>、<code>Shape</code> 等，在源文件中是这么描述的：The base class for all nodes that have children in the scene graph. 它的子类用于组织和布局组件，从而构建整个应用程序界面的层次结构。   </p><p><code>Region</code> 继承了 <code>Parent</code>，是所有基于 JavaFX 节点的 UI 控件和所有布局容器的基类：Region is the base class for all JavaFX Node-based UI Controls, and all layout containers. 可以说，基本上我们使用到的组件都是它的子类。</p><p><code>Pane</code> 和 <code>Control</code> 是 <code>Region</code> 的直接子类，分别对应组件的两大类别：布局和交互。布局组件是用于安排和组织用户界面元素的组件。交互组件是用于处理用户输入、响应用户操作和提供用户反馈的组件，比如鼠标点击。实际上，我们在自定义应用程序的过程中，主要关注的也就是 <code>Pane</code> 和 <code>Control</code> 以及它的子类。</p><h2 id="布局组件"><a href="#布局组件" class="headerlink" title="布局组件"></a>布局组件</h2><p>继承了 <code>Pane</code> 的布局组件有很多，这里只说几种，更多的布局组件若有兴趣可以自行了解。  </p><h3 id="StackPane"><a href="#StackPane" class="headerlink" title="StackPane"></a>StackPane</h3><p><code>StackPane</code> 是按照堆栈方式排列其子节点的布局容器，后添加的子节点位于上层，它允许子节点重叠，因此在需要在同一区域显示多个节点时非常有用。   </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> stage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Label</span> label1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"label1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Label</span> label2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"label2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    label2<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token string">"-fx-text-fill: #ee9954;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StackPane</span> stackPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StackPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加子节点</span>    stackPane<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>label1<span class="token punctuation">,</span>label2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>stackPane<span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段程序的运行结果如下，可以看到，<code>label1</code> 和 <code>label2</code> 是重叠在一起的，并且，<code>label2</code> 是后添加的，显示在了上层。</p><div align="center"><img src="StackPane布局.png" width="50%"></div>   <h3 id="BorderPane"><a href="#BorderPane" class="headerlink" title="BorderPane"></a>BorderPane</h3><p><code>BorderPane</code> 是按照上、下、左、右、中心五个方向布局子节点的布局容器，即将内部分为了五个区域：<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>、<code>center</code>，每个区域默认的位置是左和上，子节点可以放到相应的位置。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> stage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">BorderPane</span> borderPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BorderPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    borderPane<span class="token punctuation">.</span><span class="token function">setTop</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"top"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    borderPane<span class="token punctuation">.</span><span class="token function">setBottom</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"bottom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    borderPane<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    borderPane<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    borderPane<span class="token punctuation">.</span><span class="token function">setCenter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"center"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>borderPane<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序的运行结果如下，其中，橙色的虚线是我为了让各个区域显示清楚手动绘上去的。</p><div align="center"><img src="BorderPane布局.png" width="50%"></div> <h3 id="GridPane"><a href="#GridPane" class="headerlink" title="GridPane"></a>GridPane</h3><p>GridPane 是按照行和列的网格形式布局子节点的布局容器，它将内部分为了许多格子，我们可以自行设置子节点在哪个格子。但是，<code>GridPane</code> 设置的子节点的位置并不是绝对位置，而只是相对而言的。具体是怎么相对的，可以看下面的例子。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> stage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">GridPane</span> gridPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gridPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"ColumnIndex: 0, RowIndex: 0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gridPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"ColumnIndex: 3, RowIndex: 0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gridPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"ColumnIndex: 1, RowIndex: 1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gridPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"ColumnIndex: 1, RowIndex: 3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>gridPane<span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>程序运行结果如下，可以看到，本来应该在 0 行 3 列的标签实际上是在 0 行 2 列，以及本来应该在 3 行 1 列的标签实际上是在 2 行 1 列。所以，<code>GridPane</code> 是一种子节点的相对布局，在使用的时候要注意这一点。  </p><div align="center"><img src="GridPane布局.png" width="100%"></div> <h3 id="HBox"><a href="#HBox" class="headerlink" title="HBox"></a>HBox</h3><p><code>HBox</code> 是按照水平布局方式排列子节点的布局容器，当一行排满了后，并不会在下一行排布，而是会挤在一行，而调整页面宽度后，挤在一起的子节点又会重新显示，如下面例子所示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> stage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HBox</span> hBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        hBox<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    hBox<span class="token punctuation">.</span><span class="token function">setSpacing</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 水平间距</span>    <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>hBox<span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div align="center"><img src="HBox布局.png" width="100%"></div><h3 id="VBox"><a href="#VBox" class="headerlink" title="VBox"></a>VBox</h3><p><code>VBox</code> 与 <code>HBox</code> 相反，是按照垂直布局方式排列子节点的布局容器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> stage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">VBox</span> vBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vBox<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vBox<span class="token punctuation">.</span><span class="token function">setSpacing</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 水平间距</span>    <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>vBox<span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div align="center"><img src="VBox布局.png" width="70%"></div><h2 id="交互组件"><a href="#交互组件" class="headerlink" title="交互组件"></a>交互组件</h2><p>对于一个应用程序来说，与用户交互是非常重要的，如果只是显示而没有交互，那就跟照片差不多了。在 JavaFX 中，交互组件继承了 <code>Control</code> 抽象类。有很多的交互组件，比如按钮、复选框，选择框、链接、文本输入框、密码框等，它们的使用都大同小异，这里就以按钮作为示例。</p><h3 id="添加控件–按钮"><a href="#添加控件–按钮" class="headerlink" title="添加控件–按钮"></a>添加控件–按钮</h3><p>按钮在交互中使用频率非常高，在我们界面中要添加它也非常简单，可以直接将它添加到场景中，然后设置它的位置，但是这种方式在窗口大小调整的时候不能动态调整按钮的位置，不太优雅。所以，一般我们借助上面所介绍的布局组件来优雅地添加。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> stage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Button</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">VBox</span> vBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vBox<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>    vBox<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token class-name">Pos</span><span class="token punctuation">.</span><span class="token constant">CENTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>vBox<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div align="center"><img src="添加按钮.png" width="40%"></div><h3 id="添加按钮的事件"><a href="#添加按钮的事件" class="headerlink" title="添加按钮的事件"></a>添加按钮的事件</h3><p>上面的代码只是添加了按钮而已，重要的交互还没有实现，也就是点击按钮要做什么事还没定义。</p><p>在 JavaFX 中，当用户与控件进行了某些交互之后，就会生成事件对象。事件处理器会检查事件对象，并作出相应的处理。   </p><p>事件处理器是一个实现了 <code>EventHandler</code> 接口的对象，它里面有一个 <code>handle</code> 方法需要重写，重写的内容也就是交互想要做的事。   </p><p>有了事件处理器之后，我们还要让事件处理器知道检查什么事件，所以要在事件源上注册事件处理器，使得当事件发生的时候，<code>handle</code> 方法能够被调用。例如，<code>Button</code> 的 <code>setOnMouseClicked()</code> 方法就是为按钮的点击事件添加事件源。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> stage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Button</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"弹出窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 匿名内部类方式实例化事件监听接口，实现事件监听</span>    button<span class="token punctuation">.</span><span class="token function">setOnMouseClicked</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EventHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MouseEvent</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> mouseEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Stage</span> newStage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置窗口的模式</span>            newStage<span class="token punctuation">.</span><span class="token function">initModality</span><span class="token punctuation">(</span><span class="token class-name">Modality</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_MODAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Label</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            label<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"弹出新窗口了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">VBox</span> vBox1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vBox1<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>            vBox1<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token class-name">Pos</span><span class="token punctuation">.</span><span class="token constant">CENTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Scene</span> scene1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>vBox1<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置窗口的标题</span>            newStage<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"新窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newStage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene1<span class="token punctuation">)</span><span class="token punctuation">;</span>            newStage<span class="token punctuation">.</span><span class="token function">showAndWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">VBox</span> vBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vBox<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>    vBox<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token class-name">Pos</span><span class="token punctuation">.</span><span class="token constant">TOP_CENTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>vBox<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div align="center"><img src="按钮事件.png" width="40%"></div><h3 id="自定义注册事件处理器"><a href="#自定义注册事件处理器" class="headerlink" title="自定义注册事件处理器"></a>自定义注册事件处理器</h3><p>上面 <code>setOnMouseClicked()</code> 方法是组件上设置好的事件处理器注册方法，但是也有一些时候，这些组件设置好的事件处理器注册方法不能对应到我们想要的交互操作。这种时候就需要我们手写。   </p><p>在 JavaFX 中，是通过属性绑定的方式来进行自定义注册事件处理器，所有和属性有关的事件，通过 <code>xxxProperty().addListener()</code> 进行监听。可以看下面的例子：  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> stage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    stage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 通过属性监听界面窗口宽度变化</span>    stage<span class="token punctuation">.</span><span class="token function">widthProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChangeListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token class-name">ObservableValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> observableValue<span class="token punctuation">,</span> <span class="token class-name">Number</span> number<span class="token punctuation">,</span> <span class="token class-name">Number</span> t1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"窗口大小被改变了，原来的大小："</span> <span class="token operator">+</span> number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，现在的大小："</span> <span class="token operator">+</span> t1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">VBox</span> vBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vBox<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>            vBox<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token class-name">Pos</span><span class="token punctuation">.</span><span class="token constant">CENTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>vBox<span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div align="center"><img src="通过属性监听界面窗口宽度变化.png" width="60%"></div><p>当然，对于一些比较常规的事件，使用组件提供好的方法即可。</p><h2 id="通过-FXML-设计界面"><a href="#通过-FXML-设计界面" class="headerlink" title="通过 FXML 设计界面"></a>通过 FXML 设计界面</h2><p>FXML 就是一个可视化的 Java FX 编辑工具，在 Java FX 中已经提供了，这里只是简单提一下怎么用。   </p><p>使用方法如下：  </p><ol><li>在使用时，新建一个 FXML 文件即可，想要添加什么控件在其中拖拽添加即可。  </li><li>将 FXML 导入。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Stage</span> stage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Parent</span> root <span class="token operator">=</span> <span class="token class-name">FXMLLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"sample.fxml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Scene</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">setScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>    stage<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对 JavaFX 的介绍和使用也就介绍到这里，利用上面介绍的已经可以做出一些简单的应用程序界面。当然，JavaFX 肯定不可能只有这么一点，还有其他很多的东西，如果有需要再去学习就好。总的来说，用 JavaFX 设计应用程序界面还是比较方便的，跟在一个舞台上布置道具很相像，需要什么就放什么组件就好。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://openjfx.io/openjfx-docs/#install-javafx">Getting Started with JavaFX</a></li><li><a href="https://zhuanlan.zhihu.com/p/534593250">javafx快速入门</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaFX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java处理Excel</title>
      <link href="/blog-myc/2024/01/09/Java%E5%A4%84%E7%90%86Excel/"/>
      <url>/blog-myc/2024/01/09/Java%E5%A4%84%E7%90%86Excel/</url>
      
        <content type="html"><![CDATA[<p>这几天，因为有一个小需求需要用 Java 处理 Excel，此前我并没有接触过这方面的内容，因此在做的过程中也学了一些，在这里做个总结。   </p><p>在 Java 中处理 Excel，可以借助 Apache POI 来进行处理。<br>POI 全称是 Poor Obfuscation Implementation，意为简洁版的模糊实现。这个名字听起来会让人摸不着头脑，实际上它是 Apache 提供的对 Microsoft Office 文档读写的包。   </p><h2 id="POI-的基本使用"><a href="#POI-的基本使用" class="headerlink" title="POI 的基本使用"></a>POI 的基本使用</h2><h3 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Excel-文档导入"><a href="#Excel-文档导入" class="headerlink" title="Excel 文档导入"></a>Excel 文档导入</h3><p>我们知道，Excel 文档也叫做工作簿，工作簿中有一张张工作表。在 POI 中，也是一样的结构，通过 <code>Workbook</code> 和 <code>Sheet</code> 来对应 Excel 文档和表格。<br>在 POI 中，有三种 <code>Workbook</code>：</p><ol><li><code>HSSF</code>：对应 office 2003 格式，即 .xls 格式的文件。</li><li><code>XSSF</code>：对应 office 2007 及以上版本的格式，即 .xlsx 格式的文件。</li><li><code>SXSSF</code>：是 <code>XSSF</code> 的兼容式流扩展，专门用于处理大型 Excel 文件，以避免内存溢出的问题，适用于需要处理大量数据的场景。</li></ol><p>因为项目中没有大型 Excel 文件需要处理，所以用的是 <code>XSSF</code> 类型的 <code>Workbook</code>，这里也以这种进行示例。<br>通过 <code>Workbook</code> 在导入 Excel 文档的时候，既可以通过文档路径导入，也可以通过输入流导入。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过文档路径导入 Excel 文档</span><span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">"E:\data\test1.xlsx"</span><span class="token punctuation">;</span><span class="token class-name">Workbook</span> workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过输入流导入 Excel 文档</span><span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">"E:\data\test2.xlsx"</span><span class="token punctuation">;</span><span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Workbook</span> sheets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表格操作"><a href="#表格操作" class="headerlink" title="表格操作"></a>表格操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取表格：通过表格索引获取，索引从 0 开始</span><span class="token class-name">Sheet</span> sheet1 <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取表格：通过表格名获取</span><span class="token class-name">String</span> sheetName <span class="token operator">=</span> <span class="token string">"sheet1"</span><span class="token punctuation">;</span><span class="token class-name">Sheet</span> sheet2 <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">getSheet</span><span class="token punctuation">(</span>sheetName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 新建表格</span><span class="token class-name">Sheet</span> newSheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"newSheetName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="行操作"><a href="#行操作" class="headerlink" title="行操作"></a>行操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取行，方法参数是行号</span><span class="token class-name">Row</span> row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取表格的总行数</span><span class="token keyword">int</span> rows <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getPhysicalNumberOfRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 新建行，方法参数是行号</span><span class="token class-name">Row</span> newRow <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置行的样式，这个用过没什么效果，最好还是每个单元格单独设置</span>row<span class="token punctuation">.</span><span class="token function">setRowStyle</span><span class="token punctuation">(</span>cellStyle<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取单元格，方法参数是列号</span><span class="token class-name">Cell</span> cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取单元格的数据类型，共有 6 种类型，在 CellType 枚举类中有定义</span><span class="token class-name">CellType</span> cellType <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取单元格的值，要根据单元格数据类型来获取，比如 String 类型</span><span class="token class-name">String</span> value <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getStringCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置单元格的值，可以设置多种数据类型，比如 String</span>cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取总列数</span><span class="token keyword">int</span> totalCols <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getPhysicalNumberOfCells</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置单元格样式</span>cell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>cellStyle<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 格式化单元格中的数据，并返回字符串表示</span><span class="token class-name">DataFormatter</span> dataFormatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> value <span class="token operator">=</span> dataFormatter<span class="token punctuation">.</span><span class="token function">formatCellValue</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 合并单元格，四个参数分别是合并区域的首行、尾行、首列、尾列</span>sheet<span class="token punctuation">.</span><span class="token function">addMergedRegion</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CellRangeAddress</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> totalCol <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置列宽</span>sheet<span class="token punctuation">.</span><span class="token function">setColumnWidth</span><span class="token punctuation">(</span>colIndex<span class="token punctuation">,</span> <span class="token number">20</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字体样式设置"><a href="#字体样式设置" class="headerlink" title="字体样式设置"></a>字体样式设置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 字体设置</span><span class="token class-name">Font</span> font <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>font<span class="token punctuation">.</span><span class="token function">setFontName</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 字体类型</span>font<span class="token punctuation">.</span><span class="token function">setBold</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 加粗</span>font<span class="token punctuation">.</span><span class="token function">setFontHeightInPoints</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字体大小</span><span class="token comment">// 样式设置</span><span class="token class-name">CellStyle</span> cellStyle <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cellStyle<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>cellStyle<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token class-name">HorizontalAlignment</span><span class="token punctuation">.</span><span class="token constant">CENTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 水平居中</span>cellStyle<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span><span class="token class-name">VerticalAlignment</span><span class="token punctuation">.</span><span class="token constant">CENTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 垂直居中</span>cellStyle<span class="token punctuation">.</span><span class="token function">setFillForegroundColor</span><span class="token punctuation">(</span><span class="token class-name">IndexedColors</span><span class="token punctuation">.</span><span class="token constant">LIGHT_GREEN</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置单元格背景色</span>cellStyle<span class="token punctuation">.</span><span class="token function">setWrapText</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 文本超出时自动换行，不会挤在一行</span><span class="token class-name">DataFormat</span> dataFormat <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createDataFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cellStyle<span class="token punctuation">.</span><span class="token function">setDataFormat</span><span class="token punctuation">(</span>dataFormat<span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token string">"#0.00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 单元格中数据保留两位小数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导出-Excel-文档"><a href="#导出-Excel-文档" class="headerlink" title="导出 Excel 文档"></a>导出 Excel 文档</h3><p>POI 导出 Excel 文档是通过输出流的方式导出的。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> outputPath <span class="token operator">=</span><span class="token string">"E:\test\output.xlsx"</span><span class="token punctuation">;</span><span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">)</span><span class="token punctuation">;</span>workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是 POI 的基本使用，当然，还有很多其他的操作，但是暂时还没用到，等用到了再来进行补充。<br>总的来说这个其实不难，基本就是对应表格进行处理。使用时最重要的就是要对 Excel 表格中的表结构要有一个清晰的把握，知道各行各列的数据代表着什么，对应着进行处理即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java jar 包打包成 exe 应用程序</title>
      <link href="/blog-myc/2024/01/08/Java-jar-%E5%8C%85%E6%89%93%E5%8C%85%E6%88%90-exe-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>/blog-myc/2024/01/08/Java-jar-%E5%8C%85%E6%89%93%E5%8C%85%E6%88%90-exe-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>当我们完成了 Java 程序并打成了 Jar 包，即可让别人引用或运行，为什么还要将 jar 包打包成 exe？   </p><p>这是因为，jar 包需要在 JRE 的环境下才能运行，而在某些情况下我们需要让程序在无 JRE 的环境下运行。比如我们要把程序发给朋友使用，我们肯定不能要求朋友去安装 JDK 或者 JRE 吧，朋友一听使用这玩意儿还要那么麻烦，那肯定就不想使用了呀。所以说，像这种情况，我们要把 jar 包连同 JRE 一起打包到 exe 中，这样别人直接运行 exe 就可以了。   </p><p>接下来就详细说一下将 jar 包打包成 exe 的步骤。   </p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><ol><li><p>准备好自己的程序 jar 包，确定 jar 包没有问题，在命令行中 <code>java -jar my.jar</code> 能够运行。</p></li><li><p>下载安装 <a href="https://www.ej-technologies.com/download/exe4j/files">exe4j</a> 和 <a href="https://jrsoftware.org/isdl.php">inno setup</a>。前者是将 jar 包转换成 exe 的工具，注意这里的 exe 仅是由 jar 包转换而成的，并没有包含 JRE 进去，因此到这一步还不能结束。后者是将 exe 和 JRE 打包成一个安装程序的工具。   </p><blockquote><p>注意，exe4j 要使用注册码激活，不然转换后的 exe 启动时都会有弹窗。注册码网上直接搜即可，这里我用的是 <code>A-XVK258563F-1p4lv7mg7sav</code>。</p></blockquote></li></ol><h2 id="exe4j-打包-jar"><a href="#exe4j-打包-jar" class="headerlink" title="exe4j 打包 jar"></a>exe4j 打包 jar</h2><p>理论上来说，直接跟着软件指引打包即可。但是，对于初用者来说，可能会在一些选项犹豫不决，因此这里直接将整个过程完整走一遍。   </p><ol><li><p>打开 exe4j 软件，若有之前保存好的 exe4j 配置，则可以加载配置文件，若没有，则直接下一步。    </p><div align="center"><img src="exe4j安装之加载配置文件.png" width="100%"></div></li><li><p>选择打包的类型，我们要将 jar 包转换成 exe，所以要选择 “JAR in EXE” mode。  </p><div align="center"><img src="exe4j打包模式.png" width="100%"></div></li><li><p>输入项目名称和输出路径。 </p><div align="center"><img src="exe4j项目名称和项目导出路径.png" width="100%"></div></li><li><p>可执行类型选择 GUI，输入应用名称，设置应用图标。</p><div align="center"><img src="exe4j程序信息设置.png" width="100%"></div></li><li><p>添加虚拟机参数 <code>-Dappdir=$&#123;EXE4J_EXEDIR&#125;</code>，添加 jar 包和程序主类。</p><div align="center"><img src="exe4j添加虚拟机参数jar包主类.png" width="100%"></div></li><li><p>填写程序要求的 JDK 版本。</p><div align="center"><img src="exe4jJDK版本要求.png" width="100%"></div></li><li><p>选中 Search sequence，添加 JRE 目录。</p><div align="center"><img src="exe4j添加JRE目录.png" width="100%"></div></li><li><p>选择虚拟机类型，对于桌面应用程序和小型应用程序来说一般是 Client HotSpot VM。</p><div align="center"><img src="exe4j虚拟机类型选择.png" width="100%"></div></li><li><p>之后可以一直默认下一步，直至编译完成，在退出时可以保存配置信息，方便后面复用。  </p><div align="center"><img src="exe4j完成界面.png" width="100%"></div></li></ol><p>最终我们在输出目录可以看到一个 exe 程序生成了，双击就可以运行。但注意，这里的 exe 还是没封装进 JRE。</p><h2 id="inno-setup-打包-exe-和-JRE"><a href="#inno-setup-打包-exe-和-JRE" class="headerlink" title="inno setup 打包 exe 和 JRE"></a>inno setup 打包 exe 和 JRE</h2><ol><li><p>打开安装好的 inno setup 中的 Compil32.exe 程序，若有之前保存好的配置可以加载，否则就通过脚本向导 Script Wizard 新建一个。 </p><div align="center"><img src="innosetup加载配置文件或新建配置.png" width="70%"></div></li><li><p>填写应用的名称、版本等信息。</p><div align="center"><img src="innosetup设置应用名称和版本.png" width="70%"></div></li><li><p>设置应用目录文件夹名称，这里默认即可。</p><div align="center"><img src="innosetup应用目录文件夹名称.png" width="70%"></div></li><li><p>选择要打包的 exe 程序，在这里也就是之前 exe4j 生成的 exe 程序。  </p><div align="center"><img src="innosetup选择exe程序.png" width="70%"></div></li><li><p>设置应用程序关联的文件扩展名，默认即可。   </p><div align="center"><img src="innosetup配置关联文件.png" width="70%"></div></li><li><p>设置应用程序快捷方式。</p><div align="center"><img src="innosetup应用程序快捷方式设置.png" width="70%"></div></li><li><p>设置程序的安装模式。</p><div align="center"><img src="innosetup安装模式设置.png" width="70%"></div></li><li><p>设置程序的语言。</p><div align="center"><img src="innosetup安装程序语言设置.png" width="70%"></div></li><li><p>设置安装程序的名称和输出路径。</p><div align="center"><img src="innosetup安装程序名称和输出路径.png" width="70%"></div></li><li><p>之后一直默认下一步，Finish 时，会提示是否编译，选否，因为还需要修改脚本文件。</p><div align="center"><img src="innosetup安装程序完成时编译选否.png" width="50%"></div></li><li><p>修改脚本文件。    </p><ul><li>在 <code>[setup]</code> 中添加这一行 <code>MinVersion=7</code>，表示安装程序最低支持的系统版本为 Windows7。    </li><li>在 <code>[Files]</code> 中添加这一行 <code>Source: &quot;F:\workspace\homework-analysis-tool\app\custom-runtime-1\*&quot;; DestDir: &quot;&#123;app&#125;\custom-runtime-1&quot;; Flags: ignoreversion recursesubdirs createallsubdirs</code>。<br>它表示将 JRE 目录中的所有东西添加到安装后的程序的 <code>DestDir</code> 目录中。注意这里是要加 <code>*</code>，如果没加 <code>*</code>，则可能漏掉一些文件没转移，导致安装后的程序运行不起来。</li></ul></li></ol><div align="center"><img src="innosetup修改脚本文件.png" width="100%"></div><ol start="12"><li>编译脚本文件，生成最终的安装程序。</li></ol><div align="center"><img src="innosetup编译脚本文件.png" width="100%"></div><p>最终，我们从设置的输出目录中可以得到最终的安装程序，也是一个 exe 程序。这个程序就可以发送给朋友了，朋友拿到这个程序安装后就可以使用了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客部署问题</title>
      <link href="/blog-myc/2023/09/05/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/"/>
      <url>/blog-myc/2023/09/05/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="本地运行访问正常，部署到-github-上后加载不出-css-样式"><a href="#本地运行访问正常，部署到-github-上后加载不出-css-样式" class="headerlink" title="本地运行访问正常，部署到 github 上后加载不出 css 样式"></a>本地运行访问正常，部署到 github 上后加载不出 css 样式</h2><p>问题如上，在本地能够正常访问，但是 <code>hexo d</code> 上传到 github 后，<strong>能够访问页面但不能加载 CSS 样式文件</strong>。  </p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>遇到这种能够访问页面但无法加载内容的问题，首先肯定是要用 F12   </p><p>请求成功的情况如图：</p><div align="center"><img src="请求成功的地址.png" width="100%"></div><!-- ![请求成功的地址](请求成功的地址.png) --><p>而请求失败的情况则如图： </p><!-- ![请求失败的地址](请求失败的地址.png) --><div align="center"><img src="请求失败的地址.png" width="100%"></div><p>可以看到请求失败的响应码是 404，说明请求地址是有问题的。它请求的是 “helloworldyc.github.io&#x2F;“ 这个根目录下的资源，但是我们的博客项目的路径应该是 “helloworldyc.github.io&#x2F;blog-myc&#x2F;“，因此可以判断是 hexo 配置有问题。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>原来的 _config.yml 文件中设置的路径是：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//helloworldyc.github.io/blog<span class="token punctuation">-</span>myc<span class="token key atrule">root</span><span class="token punctuation">:</span> /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将其改为：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//helloworldyc.github.io/<span class="token key atrule">root</span><span class="token punctuation">:</span> /blog<span class="token punctuation">-</span>myc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>hexo clean</code> 后 <code>hexo g</code> 重新生成并部署到 github <code>hexo d</code>，重新刷新页面，可以发现页面加载没有问题。</p><h2 id="图片加载问题"><a href="#图片加载问题" class="headerlink" title="图片加载问题"></a>图片加载问题</h2><p>问题如上，<code>hexo g</code> 编译后访问文章<strong>无法加载出来图片</strong>。</p><h3 id="分析一"><a href="#分析一" class="headerlink" title="分析一"></a>分析一</h3><p><strong>首先，查看其生成的 public 文件夹中是否有该图片。</strong>找了一下，并没有发现该图片，说明 hexo 编译的时候没有将源文件夹中图片复制过去。</p><h3 id="分析一的解决方法"><a href="#分析一的解决方法" class="headerlink" title="分析一的解决方法"></a>分析一的解决方法</h3><ol><li>配置 _config.yml 中 <code>post_assert_folder</code></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Writing</span><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置这个字段的意思是在 <code>hexo n &quot;xxx.md&quot;</code> 的时候在 _post 目录中生成对应的一个文件夹，用来存放这个文件的图片，hexo 在编译的时候会将这个文件的图片复制到对应 index 文件的同个目录下。</p><h3 id="分析二"><a href="#分析二" class="headerlink" title="分析二"></a>分析二</h3><p><strong>其次，查看对应生成的 index.html 文件中对于图片的访问路径是否对应图片的实际路径。</strong><br>如果没有安装 hexo-asset-image 插件，那么 hexo 编译后的路径是原封不动的，如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 原来 md 中的图片地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./博客部署问题/请求失败的地址.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- hexo 编译后的图片访问地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./博客部署问题/请求失败的地址.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 编译后正确的图片访问地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./blog-myc/博客部署问题/请求失败的地址.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然，编译后的图片访问地址是不正确的，hexo 编译过程没有转换，因此要安装 hexo-asset-image 插件。<strong>这个插件的作用其实是进行一个代码的转换，也就是图片地址的转换</strong>。</p><p>然而，即使安装了 hexo-asset-image 插件，hexo 编译后的地址还是有问题，如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 原来 md 中的图片地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./博客部署问题/请求失败的地址.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- hexo 编译后的图片访问地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/blog-myc/.io/博客部署问题/请求失败的地址.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 编译后正确的图片访问地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./blog-myc/博客部署问题/请求失败的地址.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这个转换也是有问题的，因此我们还需要自己再修改插件的 js 文件。</p><h3 id="分析二的解决方法"><a href="#分析二的解决方法" class="headerlink" title="分析二的解决方法"></a>分析二的解决方法</h3><ol><li>安装 hexo-asset-image 插件：</li></ol><pre class="line-numbers language-npm" data-language="npm"><code class="language-npm">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --savenpm install hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>修改 hexo-asset-image 插件的 js 源码，路径是 <code>/blog-myc/node_modules/hexo-asset-image/index.js</code>。然后对照自己的路径修改其第 58 行：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 原来的代码是：</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对照路径修改的代码：</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图片在-md-文件中写法"><a href="#图片在-md-文件中写法" class="headerlink" title="图片在 md 文件中写法"></a>图片在 md 文件中写法</h3><p>这样子修改后，图片在 md 文件中写法如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./博客部署问题/请求成功的地址.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token url"><span class="token operator">!</span>[<span class="token content">请求成功的地址</span>](<span class="token url">请求成功的地址.png</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再重新编译访问，则没有问题了。  </p><br>]]></content>
      
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
